<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10100.17.0327.0758                               -->
<workbook source-build='10.1.7 (10100.17.0327.0758)' source-platform='mac' version='10.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='&quot;tommywilczek/s-17-dv-final-project&quot;' inline='true' name='federated.04pcr531p5ic4w1ci1e9i12kebtv' version='10.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='&quot;tommywilczek/s-17-dv-final-project&quot;' name='webdata-direct.0nhtidi1ylwm381dc9hmw0mllc54'>
            <connection APIVersion='' authType='none' authentication='no' channel='https' class='webdata-direct' connectionData='{&quot;dataset&quot;:&quot;tommywilczek/s-17-dv-final-project&quot;,&quot;apiToken&quot;:&quot;eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OnRvbW15d2lsY3playIsImlzcyI6ImFnZW50OnRvbW15d2lsY3plazo6MmVmZmJjYTMtZjJlNS00ZTA2LWFhZWMtNDg3YWNlOTM0OGY5IiwiaWF0IjoxNDg0Njk3NTI1LCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.M6DyuqzyBNtuwOVTgq8tIwGIU0vrKe-z0O2eJeZ9Qs7yA4h15JumqKJ9zKKd0Lyw0SziG2hutbjN5at6o4sQ1g&quot;}' connectionName='&quot;tommywilczek/s-17-dv-final-project&quot;' filename='' increment-key='' path='/' port='443' scriptVersion='' secondary_whitelist='' server='tableau.data.world' urlQuery='' username='' usernameAlias='' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[deaths_clean].[v_1]' />
              <expression op='[Median_Income_Raw].[v_0]' />
            </expression>
          </clause>
          <relation join='inner' type='join'>
            <clause type='join'>
              <expression op='='>
                <expression op='[deaths_clean].[v_1]' />
                <expression op='[Median_Age_Raw].[v_1]' />
              </expression>
            </clause>
            <relation join='inner' type='join'>
              <clause type='join'>
                <expression op='='>
                  <expression op='[deaths_clean].[v_1]' />
                  <expression op='[dominant_race].[v_0]' />
                </expression>
              </clause>
              <relation connection='webdata-direct.0nhtidi1ylwm381dc9hmw0mllc54' name='deaths_clean' table='[deathsclean]' type='table' />
              <relation connection='webdata-direct.0nhtidi1ylwm381dc9hmw0mllc54' name='dominant_race' table='[dominantrace]' type='table' />
            </relation>
            <relation connection='webdata-direct.0nhtidi1ylwm381dc9hmw0mllc54' name='Median_Age_Raw' table='[MedianAgeRaw]' type='table' />
          </relation>
          <relation connection='webdata-direct.0nhtidi1ylwm381dc9hmw0mllc54' name='Median_Income_Raw' table='[MedianIncomeRaw]' type='table' />
        </relation>
        <cols>
          <map key='[v_0 (Median_Age_Raw)]' value='[Median_Age_Raw].[v_0]' />
          <map key='[v_0 (Median_Income_Raw)]' value='[Median_Income_Raw].[v_0]' />
          <map key='[v_0 (dominant_race)]' value='[dominant_race].[v_0]' />
          <map key='[v_0]' value='[deaths_clean].[v_0]' />
          <map key='[v_1 (Median_Age_Raw)]' value='[Median_Age_Raw].[v_1]' />
          <map key='[v_1 (Median_Income_Raw)]' value='[Median_Income_Raw].[v_1]' />
          <map key='[v_1 (dominant_race)]' value='[dominant_race].[v_1]' />
          <map key='[v_1]' value='[deaths_clean].[v_1]' />
          <map key='[v_2]' value='[deaths_clean].[v_2]' />
          <map key='[v_3]' value='[deaths_clean].[v_3]' />
          <map key='[v_4]' value='[deaths_clean].[v_4]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_0]</local-name>
            <parent-name>[deaths_clean]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>0</ordinal>
            <caption>Year</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_1]</local-name>
            <parent-name>[deaths_clean]</parent-name>
            <remote-alias>ZIP Code</remote-alias>
            <ordinal>1</ordinal>
            <caption>ZIP Code</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_2</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_2]</local-name>
            <parent-name>[deaths_clean]</parent-name>
            <remote-alias>Causes of Death</remote-alias>
            <ordinal>2</ordinal>
            <caption>Causes of Death</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_3</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_3]</local-name>
            <parent-name>[deaths_clean]</parent-name>
            <remote-alias>Count</remote-alias>
            <ordinal>3</ordinal>
            <caption>Count</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_4</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_4]</local-name>
            <parent-name>[deaths_clean]</parent-name>
            <remote-alias>Location</remote-alias>
            <ordinal>4</ordinal>
            <caption>Location</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_0 (dominant_race)]</local-name>
            <parent-name>[dominant_race]</parent-name>
            <remote-alias>ZipCode</remote-alias>
            <ordinal>5</ordinal>
            <caption>ZipCode</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_1 (dominant_race)]</local-name>
            <parent-name>[dominant_race]</parent-name>
            <remote-alias>Dominant</remote-alias>
            <ordinal>6</ordinal>
            <caption>Dominant</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>1</remote-type>
            <local-name>[v_0 (Median_Age_Raw)]</local-name>
            <parent-name>[Median_Age_Raw]</parent-name>
            <remote-alias>Median Age</remote-alias>
            <ordinal>7</ordinal>
            <caption>Median Age</caption>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_1 (Median_Age_Raw)]</local-name>
            <parent-name>[Median_Age_Raw]</parent-name>
            <remote-alias>Zip Code</remote-alias>
            <ordinal>8</ordinal>
            <caption>Zip Code</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_0 (Median_Income_Raw)]</local-name>
            <parent-name>[Median_Income_Raw]</parent-name>
            <remote-alias>Zipcode</remote-alias>
            <ordinal>9</ordinal>
            <caption>Zipcode</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_1 (Median_Income_Raw)]</local-name>
            <parent-name>[Median_Income_Raw]</parent-name>
            <remote-alias>Median Household Income</remote-alias>
            <ordinal>10</ordinal>
            <caption>Median Household Income</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Weighted Age Deaths ' datatype='real' name='[Calculation_584975370992418816]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([v_3])&#10;/ &#10;COUNT([v_0 (Median_Age_Raw)])' />
      </column>
      <column caption='KPI: Avg Deaths per zip code' datatype='real' name='[Calculation_584975371014868993]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([v_3])/[Number of Records]' />
      </column>
      <column caption='Diff from Avg' datatype='real' name='[Calculation_584975371048558594]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Calculation_584975371014868993]-WINDOW_AVG([Calculation_584975371014868993])'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Weighted Race Deaths' datatype='real' name='[Calculation_584975371052630019]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([v_3])/COUNT([v_1 (dominant_race)])' />
      </column>
      <column caption='Sum(deathcount)' datatype='integer' name='[Calculation_858076467498622976]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='3478367' />
      </column>
      <column aggregation='None' caption='Median Age (bin)' datatype='integer' name='[Median Age (bin)]' role='dimension' type='ordinal'>
        <calculation class='bin' decimals='1' formula='[v_0 (Median_Age_Raw)]' peg='0' size='10' />
      </column>
      <column aggregation='None' datatype='integer' name='[Median Household Income (bin)]' role='dimension' type='quantitative'>
        <calculation class='bin' decimals='4' formula='[v_1 (Median_Income_Raw)]' peg='0' size='10000' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='COUNTD([v_0 (dominant_race)])' />
      </column>
      <column caption='Median Age' datatype='real' name='[v_0 (Median_Age_Raw)]' role='measure' type='quantitative' />
      <column caption='Zipcode' datatype='integer' default-format='*00000' name='[v_0 (Median_Income_Raw)]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column caption='ZipCode' datatype='integer' default-format='*00000' name='[v_0 (dominant_race)]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column caption='Year' datatype='string' name='[v_0]' role='dimension' type='nominal' />
      <column caption='Zip Code' datatype='integer' default-format='*00000' name='[v_1 (Median_Age_Raw)]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column caption='Median Household Income' datatype='integer' name='[v_1 (Median_Income_Raw)]' role='measure' type='quantitative' />
      <column caption='Race' datatype='string' name='[v_1 (dominant_race)]' role='dimension' type='nominal' />
      <column caption='ZIP Code' datatype='integer' default-format='*00000' name='[v_1]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column caption='Causes of Death' datatype='string' name='[v_2]' role='dimension' type='nominal' />
      <column caption='Death Count' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
      <column caption='Location' datatype='string' name='[v_4]' role='dimension' type='nominal' />
      <column-instance column='[Median Household Income (bin)]' derivation='None' name='[none:Median Household Income (bin):ok]' pivot='key' type='ordinal' />
      <column-instance column='[v_1 (dominant_race)]' derivation='None' name='[none:v_1 (dominant_race):nk]' pivot='key' type='nominal' />
      <group caption='Action (Median Age (bin),Causes of Death)' hidden='true' name='[Action (Median Age (bin),Causes of Death)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Median Age (bin)]' />
          <groupfilter function='level-members' level='[v_2]' />
        </groupfilter>
      </group>
      <group caption='Action (Median Household Income (bin))' hidden='true' name='[Action (Median Household Income (bin))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Median Household Income (bin):ok]' />
        </groupfilter>
      </group>
      <group caption='Action (Race)' hidden='true' name='[Action (Race)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[v_1 (dominant_race)]' />
        </groupfilter>
      </group>
      <group caption='Action (Race,ZIP Code)' hidden='true' name='[Action (Race,ZIP Code)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[v_1 (dominant_race)]' />
          <groupfilter function='level-members' level='[v_1]' />
        </groupfilter>
      </group>
      <group caption='Action (Zip Code,Causes of Death)' hidden='true' name='[Action (Zip Code,Causes of Death)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[v_1 (Median_Age_Raw)]' />
          <groupfilter function='level-members' level='[v_2]' />
        </groupfilter>
      </group>
      <group caption='Action (Zip Code,Race,Causes of Death)' hidden='true' name='[Action (Zip Code,Race,Causes of Death)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[v_1 (Median_Age_Raw)]' />
          <groupfilter function='level-members' level='[v_1 (dominant_race)]' />
          <groupfilter function='level-members' level='[v_2]' />
        </groupfilter>
      </group>
      <group name='[At-risk income brackets]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[Median Household Income (bin)]' member='4' />
          <groupfilter function='member' level='[Median Household Income (bin)]' member='5' />
          <groupfilter function='member' level='[Median Household Income (bin)]' member='6' />
          <groupfilter function='member' level='[Median Household Income (bin)]' member='7' />
          <groupfilter function='member' level='[Median Household Income (bin)]' member='8' />
          <groupfilter function='member' level='[Median Household Income (bin)]' member='9' />
          <groupfilter function='member' level='[Median Household Income (bin)]' member='15' />
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='/Users/tommywilczek/Documents/My Tableau Repository/Datasources/federated.04pcr531p5ic4w1ci1e9i12kebtv_15a951m1n9w3as115hgjx10w533f.tde' schema='Extract' tablename='Extract' update-time='04/27/2017 08:54:10 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <cols>
            <map key='[v_0 (Median_Age_Raw)]' value='[Extract].[v_0]' />
            <map key='[v_0 (Median_Income_Raw)]' value='[Extract].[v_01]' />
            <map key='[v_0 (dominant_race)]' value='[Extract].[v_02]' />
            <map key='[v_0]' value='[Extract].[v_03]' />
            <map key='[v_1 (Median_Age_Raw)]' value='[Extract].[v_1]' />
            <map key='[v_1 (Median_Income_Raw)]' value='[Extract].[v_11]' />
            <map key='[v_1 (dominant_race)]' value='[Extract].[v_12]' />
            <map key='[v_1]' value='[Extract].[v_13]' />
            <map key='[v_2]' value='[Extract].[v_2]' />
            <map key='[v_3]' value='[Extract].[v_3]' />
            <map key='[v_4]' value='[Extract].[v_4]' />
          </cols>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='311276' timestamp-start='2017-04-27 20:54:10.539' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>v_0</remote-name>
              <remote-type>5</remote-type>
              <local-name>[v_0 (Median_Age_Raw)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_0</remote-alias>
              <ordinal>0</ordinal>
              <family>Median_Age_Raw</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>391</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='real'>10.699999999999999</statistic>
                <statistic aggregation='Max' datatype='real'>78.700000000000003</statistic>
                <statistic aggregation='Count' datatype='integer'>311038</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_01</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_0 (Median_Income_Raw)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_01</remote-alias>
              <ordinal>1</ordinal>
              <family>Median_Income_Raw</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1644</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>90001</statistic>
                <statistic aggregation='Max' datatype='integer'>96161</statistic>
                <statistic aggregation='Count' datatype='integer'>311276</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_02</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_0 (dominant_race)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_02</remote-alias>
              <ordinal>2</ordinal>
              <family>dominant_race</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1644</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>90001</statistic>
                <statistic aggregation='Max' datatype='integer'>96161</statistic>
                <statistic aggregation='Count' datatype='integer'>311276</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_03</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_0]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_03</remote-alias>
              <ordinal>3</ordinal>
              <family>deaths_clean</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>15</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LROOT' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;1999&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;2013&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>311276</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;root&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_1</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_1 (Median_Age_Raw)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_1</remote-alias>
              <ordinal>4</ordinal>
              <family>Median_Age_Raw</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1644</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>90001</statistic>
                <statistic aggregation='Max' datatype='integer'>96161</statistic>
                <statistic aggregation='Count' datatype='integer'>311276</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_11</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_1 (Median_Income_Raw)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_11</remote-alias>
              <ordinal>5</ordinal>
              <family>Median_Income_Raw</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1569</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>12487</statistic>
                <statistic aggregation='Max' datatype='integer'>236500</statistic>
                <statistic aggregation='Count' datatype='integer'>308070</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_12</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_1 (dominant_race)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_12</remote-alias>
              <ordinal>6</ordinal>
              <family>dominant_race</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>5</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LROOT' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;American_Indian&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;White&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>311276</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;White&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;root&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_13</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_13</remote-alias>
              <ordinal>7</ordinal>
              <family>deaths_clean</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1644</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>90001</statistic>
                <statistic aggregation='Max' datatype='integer'>96161</statistic>
                <statistic aggregation='Count' datatype='integer'>311276</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_2</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_2]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_2</remote-alias>
              <ordinal>8</ordinal>
              <family>deaths_clean</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>14</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LROOT' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;ALZ&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;SUI&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>311276</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;root&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_3</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_3]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_3</remote-alias>
              <ordinal>9</ordinal>
              <family>deaths_clean</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>239</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>380</statistic>
                <statistic aggregation='Count' datatype='integer'>311276</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_4</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_4]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_4</remote-alias>
              <ordinal>10</ordinal>
              <family>deaths_clean</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1644</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LROOT' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;POINT (32.562567 -117.042976)&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;POINT (41.9675 -121.916944)&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>311276</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;root&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.512681' group-percentage='0.0416667' measure-ordering='alphabetic' measure-percentage='0.445652' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:v_1 (dominant_race):nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;American_Indian&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;White&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Black&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Asian&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter1' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source datasource='federated.04pcr531p5ic4w1ci1e9i12kebtv' type='datasource'>
        <exclude-sheet name='Boxplot' />
        <exclude-sheet name='Histogram' />
        <exclude-sheet name='Scatterplot' />
      </source>
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Scatterplot' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Bar Chart'>
      <table>
        <view>
          <datasources>
            <datasource caption='&quot;tommywilczek/s-17-dv-final-project&quot;' name='federated.04pcr531p5ic4w1ci1e9i12kebtv' />
          </datasources>
          <datasource-dependencies datasource='federated.04pcr531p5ic4w1ci1e9i12kebtv'>
            <column caption='KPI: Avg Deaths per zip code' datatype='real' name='[Calculation_584975371014868993]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([v_3])/[Number of Records]' />
            </column>
            <column caption='Diff from Avg' datatype='real' name='[Calculation_584975371048558594]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_584975371014868993]-WINDOW_AVG([Calculation_584975371014868993])'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column aggregation='None' caption='Median Age (bin)' datatype='integer' name='[Median Age (bin)]' role='dimension' type='ordinal'>
              <calculation class='bin' decimals='1' formula='[v_0 (Median_Age_Raw)]' peg='0' size='10' />
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='COUNTD([v_0 (dominant_race)])' />
            </column>
            <column-instance column='[Median Age (bin)]' derivation='None' name='[none:Median Age (bin):ok]' pivot='key' type='ordinal' />
            <column-instance column='[v_2]' derivation='None' name='[none:v_2:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_584975371014868993]' derivation='User' name='[usr:Calculation_584975371014868993:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_584975371048558594]' derivation='User' name='[usr:Calculation_584975371048558594:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column caption='Median Age' datatype='real' name='[v_0 (Median_Age_Raw)]' role='measure' type='quantitative' />
            <column caption='ZipCode' datatype='integer' default-format='*00000' name='[v_0 (dominant_race)]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
            <column caption='Causes of Death' datatype='string' name='[v_2]' role='dimension' type='nominal' />
            <column caption='Death Count' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:Median Age (bin):ok]' kind='hide'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Median Age (bin):ok]' />
              <groupfilter function='member' level='[none:Median Age (bin):ok]' member='%null%' />
            </groupfilter>
          </filter>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='stroke-color' id='refline0' value='#e15759' />
          </style-rule>
        </style>
        <panes>
          <pane id='6'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[usr:Calculation_584975371048558594:qk]' />
            </encodings>
            <reference-line axis-column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[usr:Calculation_584975371014868993:qk]' enable-instant-analytics='true' formula='average' id='refline1' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[usr:Calculation_584975371014868993:qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[usr:Calculation_584975371014868993:qk]</rows>
        <cols>([federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_2:nk] / [federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:Median Age (bin):ok])</cols>
      </table>
    </worksheet>
    <worksheet name='Boxplot'>
      <table>
        <view>
          <datasources>
            <datasource caption='&quot;tommywilczek/s-17-dv-final-project&quot;' name='federated.04pcr531p5ic4w1ci1e9i12kebtv' />
          </datasources>
          <datasource-dependencies datasource='federated.04pcr531p5ic4w1ci1e9i12kebtv'>
            <column-instance column='[v_1 (Median_Income_Raw)]' derivation='None' name='[none:v_1 (Median_Income_Raw):qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_1 (dominant_race)]' derivation='None' name='[none:v_1 (dominant_race):nk]' pivot='key' type='nominal' />
            <column-instance column='[v_2]' derivation='None' name='[none:v_2:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_3]' derivation='Sum' name='[sum:v_3:qk]' pivot='key' type='quantitative' />
            <column caption='Median Household Income' datatype='integer' name='[v_1 (Median_Income_Raw)]' role='measure' type='quantitative' />
            <column caption='Race' datatype='string' name='[v_1 (dominant_race)]' role='dimension' type='nominal' />
            <column caption='Causes of Death' datatype='string' name='[v_2]' role='dimension' type='nominal' />
            <column caption='Death Count' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (Median_Income_Raw):qk]' included-values='in-range'>
            <min>200000</min>
            <max>236500</max>
          </filter>
          <slices>
            <column>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (Median_Income_Raw):qk]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]' />
            </encodings>
            <reference-line axis-column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-cell' symmetric='false' value-column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]</rows>
        <cols>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_2:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Cancer across Zipcodes'>
      <layout-options>
        <caption>
          <formatted-text>
            <run fontname='Tableau Book,serif'>This map shows the cancer rates for each zip code. The highest is 94558. After a quick search, we found that Napa Valley is in this zip code. After a little bit of reflection, we realized Napa Valley has an incredible amount of vineyards, and after some research we found that it is one of the most pesticide-intense regions in the state. With all of this knowledge, it is clear why this area has far more cancer deaths than any other.</run>
            <run fontcolor='#000000'>Æ &#10;  </run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='&quot;tommywilczek/s-17-dv-final-project&quot;' name='federated.04pcr531p5ic4w1ci1e9i12kebtv' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.04pcr531p5ic4w1ci1e9i12kebtv'>
            <column-instance column='[v_0 (Median_Age_Raw)]' derivation='Median' name='[med:v_0 (Median_Age_Raw):qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_1 (Median_Income_Raw)]' derivation='Median' name='[med:v_1 (Median_Income_Raw):qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_1 (Median_Age_Raw)]' derivation='None' name='[none:v_1 (Median_Age_Raw):ok]' pivot='key' type='ordinal' />
            <column-instance column='[v_1 (dominant_race)]' derivation='None' name='[none:v_1 (dominant_race):nk]' pivot='key' type='nominal' />
            <column-instance column='[v_2]' derivation='None' name='[none:v_2:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_3]' derivation='Sum' name='[sum:v_3:qk]' pivot='key' type='quantitative' />
            <column caption='Median Age' datatype='real' name='[v_0 (Median_Age_Raw)]' role='measure' type='quantitative' />
            <column caption='Zip Code' datatype='integer' default-format='*00000' name='[v_1 (Median_Age_Raw)]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
            <column caption='Median Household Income' datatype='integer' name='[v_1 (Median_Income_Raw)]' role='measure' type='quantitative' />
            <column caption='Race' datatype='string' name='[v_1 (dominant_race)]' role='dimension' type='nominal' />
            <column caption='Causes of Death' datatype='string' name='[v_2]' role='dimension' type='nominal' />
            <column caption='Death Count' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]' included-values='in-range'>
            <min>2009</min>
            <max>3332</max>
          </filter>
          <slices>
            <column>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Longitude (generated)]' field-type='quantitative' max='-12181782.322885098' min='-14370938.812972547' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Latitude (generated)]' field-type='quantitative' max='5013894.04994871' min='3869173.1143499101' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#f2dada</color>
                <color>#f3c3c4</color>
                <color>#f4acad</color>
                <color>#f59496</color>
                <color>#f67d7f</color>
                <color>#f76567</color>
                <color>#f84d50</color>
                <color>#f93538</color>
                <color>#fa1c20</color>
                <color>#fc0408</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]' />
              <lod column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (Median_Age_Raw):ok]' />
              <lod column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[med:v_1 (Median_Income_Raw):qk]' />
              <lod column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]' />
              <lod column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[med:v_0 (Median_Age_Raw):qk]' />
              <geometry column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Latitude (generated)]</rows>
        <cols>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Longitude (generated)]</cols>
        <pages>
          <column>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_2:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='Crosstab'>
      <table>
        <view>
          <datasources>
            <datasource caption='&quot;tommywilczek/s-17-dv-final-project&quot;' name='federated.04pcr531p5ic4w1ci1e9i12kebtv' />
          </datasources>
          <datasource-dependencies datasource='federated.04pcr531p5ic4w1ci1e9i12kebtv'>
            <column caption='KPI: Avg Deaths per zip code' datatype='real' name='[Calculation_584975371014868993]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([v_3])/[Number of Records]' />
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='COUNTD([v_0 (dominant_race)])' />
            </column>
            <column-instance column='[v_1 (dominant_race)]' derivation='None' name='[none:v_1 (dominant_race):nk]' pivot='key' type='nominal' />
            <column-instance column='[v_2]' derivation='None' name='[none:v_2:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_3]' derivation='Sum' name='[sum:v_3:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_584975371014868993]' derivation='User' name='[usr:Calculation_584975371014868993:qk]' pivot='key' type='quantitative' />
            <column caption='ZipCode' datatype='integer' default-format='*00000' name='[v_0 (dominant_race)]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
            <column caption='Race' datatype='string' name='[v_1 (dominant_race)]' role='dimension' type='nominal' />
            <column caption='Causes of Death' datatype='string' name='[v_2]' role='dimension' type='nominal' />
            <column caption='Death Count' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[usr:Calculation_584975371014868993:qk]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#f2dcdc</color>
                <color>#f3c6c8</color>
                <color>#f4b1b3</color>
                <color>#f59c9e</color>
                <color>#f68689</color>
                <color>#f77074</color>
                <color>#f85a5e</color>
                <color>#f94448</color>
                <color>#fa2d33</color>
                <color>#fc171d</color>
              </color-palette>
            </encoding>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[usr:Calculation_584975371014868993:qk]' />
              <text column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_2:nk]</rows>
        <cols>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Histogram'>
      <table>
        <view>
          <datasources>
            <datasource caption='&quot;tommywilczek/s-17-dv-final-project&quot;' name='federated.04pcr531p5ic4w1ci1e9i12kebtv' />
          </datasources>
          <datasource-dependencies datasource='federated.04pcr531p5ic4w1ci1e9i12kebtv'>
            <column aggregation='None' datatype='integer' name='[Median Household Income (bin)]' role='dimension' type='quantitative'>
              <calculation class='bin' decimals='4' formula='[v_1 (Median_Income_Raw)]' peg='0' size='10000' />
            </column>
            <column-instance column='[v_1 (Median_Income_Raw)]' derivation='Count' name='[cnt:v_1 (Median_Income_Raw):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Median Household Income (bin)]' derivation='None' name='[none:Median Household Income (bin):qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_1 (dominant_race)]' derivation='None' name='[none:v_1 (dominant_race):nk]' pivot='key' type='nominal' />
            <column caption='Median Household Income' datatype='integer' name='[v_1 (Median_Income_Raw)]' role='measure' type='quantitative' />
            <column caption='Race' datatype='string' name='[v_1 (dominant_race)]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]'>
            <groupfilter function='level-members' level='[none:v_1 (dominant_race):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing custom-mark-size-in-axis-units='1.0' mark-alignment='mark-alignment-left' mark-sizing-setting='marks-scaling-on' use-custom-mark-size='false' />
            <encodings>
              <color column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[cnt:v_1 (Median_Income_Raw):qk]</rows>
        <cols>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:Median Household Income (bin):qk]</cols>
        <show-full-range>
          <column>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Median Household Income (bin)]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='ID Sets: High Risk Income Brackets1'>
      <table>
        <view>
          <datasources>
            <datasource caption='&quot;tommywilczek/s-17-dv-final-project&quot;' name='federated.04pcr531p5ic4w1ci1e9i12kebtv' />
          </datasources>
          <datasource-dependencies datasource='federated.04pcr531p5ic4w1ci1e9i12kebtv'>
            <column caption='KPI: Avg Deaths per zip code' datatype='real' name='[Calculation_584975371014868993]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([v_3])/[Number of Records]' />
            </column>
            <column aggregation='None' datatype='integer' name='[Median Household Income (bin)]' role='dimension' type='quantitative'>
              <calculation class='bin' decimals='4' formula='[v_1 (Median_Income_Raw)]' peg='0' size='10000' />
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='COUNTD([v_0 (dominant_race)])' />
            </column>
            <column-instance column='[Median Household Income (bin)]' derivation='None' name='[none:Median Household Income (bin):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_584975371014868993]' derivation='User' name='[usr:Calculation_584975371014868993:qk]' pivot='key' type='quantitative' />
            <column caption='ZipCode' datatype='integer' default-format='*00000' name='[v_0 (dominant_race)]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
            <column caption='Median Household Income' datatype='integer' name='[v_1 (Median_Income_Raw)]' role='measure' type='quantitative' />
            <column caption='Death Count' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing custom-mark-size-in-axis-units='1.0' mark-alignment='mark-alignment-left' mark-sizing-setting='marks-scaling-on' use-custom-mark-size='false' />
          </pane>
        </panes>
        <rows>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[usr:Calculation_584975371014868993:qk]</rows>
        <cols>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:Median Household Income (bin):qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Income and Race using ID Sets'>
      <table>
        <view>
          <datasources>
            <datasource caption='&quot;tommywilczek/s-17-dv-final-project&quot;' name='federated.04pcr531p5ic4w1ci1e9i12kebtv' />
          </datasources>
          <datasource-dependencies datasource='federated.04pcr531p5ic4w1ci1e9i12kebtv'>
            <column caption='KPI: Avg Deaths per zip code' datatype='real' name='[Calculation_584975371014868993]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([v_3])/[Number of Records]' />
            </column>
            <column aggregation='None' datatype='integer' name='[Median Household Income (bin)]' role='dimension' type='quantitative'>
              <calculation class='bin' decimals='4' formula='[v_1 (Median_Income_Raw)]' peg='0' size='10000' />
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='COUNTD([v_0 (dominant_race)])' />
            </column>
            <column-instance column='[At-risk income brackets]' derivation='InOut' name='[io:At-risk income brackets:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_1 (dominant_race)]' derivation='None' name='[none:v_1 (dominant_race):nk]' pivot='key' type='nominal' />
            <column-instance column='[v_3]' derivation='Sum' name='[sum:v_3:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_584975371014868993]' derivation='User' name='[usr:Calculation_584975371014868993:qk]' pivot='key' type='quantitative' />
            <column caption='ZipCode' datatype='integer' default-format='*00000' name='[v_0 (dominant_race)]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
            <column caption='Median Household Income' datatype='integer' name='[v_1 (Median_Income_Raw)]' role='measure' type='quantitative' />
            <column caption='Race' datatype='string' name='[v_1 (dominant_race)]' role='dimension' type='nominal' />
            <column caption='Death Count' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[io:At-risk income brackets:nk]' />
            </encodings>
          </pane>
          <pane id='1' y-axis-name='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[usr:Calculation_584975371014868993:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[io:At-risk income brackets:nk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[io:At-risk income brackets:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.04pcr531p5ic4w1ci1e9i12kebtv].[usr:Calculation_584975371014868993:qk] + [federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk])</rows>
        <cols>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Scatterplot'>
      <table>
        <view>
          <datasources>
            <datasource caption='&quot;tommywilczek/s-17-dv-final-project&quot;' name='federated.04pcr531p5ic4w1ci1e9i12kebtv' />
          </datasources>
          <datasource-dependencies datasource='federated.04pcr531p5ic4w1ci1e9i12kebtv'>
            <column aggregation='None' caption='Median Age (bin)' datatype='integer' name='[Median Age (bin)]' role='dimension' type='ordinal'>
              <calculation class='bin' decimals='1' formula='[v_0 (Median_Age_Raw)]' peg='0' size='10' />
            </column>
            <column aggregation='None' datatype='integer' name='[Median Household Income (bin)]' role='dimension' type='quantitative'>
              <calculation class='bin' decimals='4' formula='[v_1 (Median_Income_Raw)]' peg='0' size='10000' />
            </column>
            <column-instance column='[Median Household Income (bin)]' derivation='None' name='[none:Median Household Income (bin):ok]' pivot='key' type='ordinal' />
            <column-instance column='[v_0]' derivation='None' name='[none:v_0:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_1 (dominant_race)]' derivation='None' name='[none:v_1 (dominant_race):nk]' pivot='key' type='nominal' />
            <column-instance column='[v_2]' derivation='None' name='[none:v_2:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_0 (Median_Age_Raw)]' derivation='Sum' name='[sum:v_0 (Median_Age_Raw):qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_1 (Median_Income_Raw)]' derivation='Sum' name='[sum:v_1 (Median_Income_Raw):qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_3]' derivation='Sum' name='[sum:v_3:qk]' pivot='key' type='quantitative' />
            <column caption='Median Age' datatype='real' name='[v_0 (Median_Age_Raw)]' role='measure' type='quantitative' />
            <column caption='Year' datatype='string' name='[v_0]' role='dimension' type='nominal' />
            <column caption='Zip Code' datatype='integer' default-format='*00000' name='[v_1 (Median_Age_Raw)]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
            <column caption='Median Household Income' datatype='integer' name='[v_1 (Median_Income_Raw)]' role='measure' type='quantitative' />
            <column caption='Race' datatype='string' name='[v_1 (dominant_race)]' role='dimension' type='nominal' />
            <column caption='ZIP Code' datatype='integer' default-format='*00000' name='[v_1]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
            <column caption='Causes of Death' datatype='string' name='[v_2]' role='dimension' type='nominal' />
            <column caption='Death Count' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Action (Median Age (bin),Causes of Death)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Median Age (bin)]' />
              <groupfilter function='level-members' level='[v_2]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Action (Median Household Income (bin))]'>
            <groupfilter function='level-members' level='[none:Median Household Income (bin):ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Action (Race)]'>
            <groupfilter function='level-members' level='[v_1 (dominant_race)]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Action (Race,ZIP Code)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[v_1 (dominant_race)]' />
              <groupfilter function='level-members' level='[v_1]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Action (Zip Code,Causes of Death)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[v_1 (Median_Age_Raw)]' />
              <groupfilter function='level-members' level='[v_2]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Action (Zip Code,Race,Causes of Death)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[v_1 (Median_Age_Raw)]' />
              <groupfilter function='level-members' level='[v_1 (dominant_race)]' />
              <groupfilter function='level-members' level='[v_2]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Action (Race,ZIP Code)]</column>
            <column>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Action (Median Age (bin),Causes of Death)]</column>
            <column>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Action (Zip Code,Causes of Death)]</column>
            <column>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Action (Median Household Income (bin))]</column>
            <column>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Action (Zip Code,Race,Causes of Death)]</column>
            <column>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Action (Race)]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]' />
              <lod column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_1 (Median_Income_Raw):qk]' />
              <lod column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_0:nk]' />
            </encodings>
            <trendline enable-confidence-bands='true' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' exclude-panes='false' fit='linear' />
          </pane>
        </panes>
        <rows>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]</rows>
        <cols>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_0 (Median_Age_Raw):qk]</cols>
        <pages>
          <column>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_2:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='Scatterplot Map'>
      <table>
        <view>
          <datasources>
            <datasource caption='&quot;tommywilczek/s-17-dv-final-project&quot;' name='federated.04pcr531p5ic4w1ci1e9i12kebtv' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.04pcr531p5ic4w1ci1e9i12kebtv'>
            <column-instance column='[v_1 (Median_Income_Raw)]' derivation='Median' name='[med:v_1 (Median_Income_Raw):qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_1 (dominant_race)]' derivation='None' name='[none:v_1 (dominant_race):nk]' pivot='key' type='nominal' />
            <column-instance column='[v_1]' derivation='None' name='[none:v_1:ok]' pivot='key' type='ordinal' />
            <column caption='Median Household Income' datatype='integer' name='[v_1 (Median_Income_Raw)]' role='measure' type='quantitative' />
            <column caption='Race' datatype='string' name='[v_1 (dominant_race)]' role='dimension' type='nominal' />
            <column caption='ZIP Code' datatype='integer' default-format='*00000' name='[v_1]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[med:v_1 (Median_Income_Raw):qk]' value='C1033%' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[med:v_1 (Median_Income_Raw):qk]' value='C1033%' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]' />
              <lod column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1:ok]' />
              <size column='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[med:v_1 (Median_Income_Raw):qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Latitude (generated)]</rows>
        <cols>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[Longitude (generated)]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='ScatterplotDashboard'>
      <style />
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='&quot;tommywilczek/s-17-dv-final-project&quot;' name='federated.04pcr531p5ic4w1ci1e9i12kebtv' />
      </datasources>
      <datasource-dependencies datasource='federated.04pcr531p5ic4w1ci1e9i12kebtv'>
        <column-instance column='[v_3]' derivation='Sum' name='[sum:v_3:qk]' pivot='key' type='quantitative' />
        <column caption='Death Count' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='87086' x='0' y='0'>
              <zone h='100000' id='8' name='Scatterplot' w='43544' x='0' y='0' />
              <zone h='100000' id='10' name='Cancer across Zipcodes' w='43542' x='43544' y='0' />
            </zone>
            <zone fixed-size='160' h='100000' id='4' is-fixed='true' param='vert' type='layout-flow' w='12914' x='87086' y='0'>
              <zone count='1' h='16643' id='9' name='Scatterplot' name1='Cancer across Zipcodes' synchronized='1' type='currpage' w='12914' x='87086' y='0' />
              <zone h='9986' id='11' name='Cancer across Zipcodes' param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]' show-domain='false' show-null-ctrls='false' type='filter' w='12914' x='87086' y='16643' />
              <zone h='9407' id='12' name='Cancer across Zipcodes' pane-specification-id='0' param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]' type='color' w='12914' x='87086' y='26629' />
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='Boxplot'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]' type='color' />
            <card param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (Median_Income_Raw):qk]' show-domain='false' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Histogram'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]' type='color' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Scatterplot'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card type='currpage' />
            <card pane-specification-id='2' param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>&quot;CAN&quot;</bucket>
          </multibucket>
        </current-page>
      </viewpoint>
    </window>
    <window class='worksheet' name='Scatterplot Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[med:v_1 (Median_Income_Raw):qk]' type='size' />
            <card pane-specification-id='0' param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]' type='color' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Cancer across Zipcodes'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='104'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>&quot;CAN&quot;</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:Median Age (bin):ok]</field>
            <field>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_1 (dominant_race):nk]</field>
            <field>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[none:v_2:nk]</field>
            <field>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[sum:v_3:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
    </window>
    <window class='dashboard' name='ScatterplotDashboard'>
      <viewpoints>
        <viewpoint name='Cancer across Zipcodes'>
          <current-page>
            <multibucket>
              <bucket>&quot;CAN&quot;</bucket>
            </multibucket>
          </current-page>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Scatterplot'>
          <current-page>
            <multibucket>
              <bucket>&quot;CAN&quot;</bucket>
            </multibucket>
          </current-page>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='10' />
    </window>
    <window class='worksheet' maximized='true' name='Crosstab'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[usr:Calculation_584975371014868993:qk]' type='color' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Bar Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.04pcr531p5ic4w1ci1e9i12kebtv].[io:At-risk income brackets:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Income and Race using ID Sets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.04pcr531p5ic4w1ci1e9i12kebtv].[io:At-risk income brackets:nk]' type='color' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='ID Sets: High Risk Income Brackets1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Bar Chart' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Boxplot' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAgAElEQVR4nO2deXAj2X3fP90NgMTFm+ABXnORM9y595qZ3YzGu961JK9sRZbL5Vh/2H+o
      XJVIVXblj6RS+SNOJZWq/JNUJalUSUkU+VrLq/VaVmytvJJWe3FWc+wcPGY45PAGARIkQQDE
      je6XPzCEZnYBEuCQAIZ4n6qpIdn9+vfr1/3t7vfe7/2eIoQQSCRVilpuBySSciIFIKlqpAAk
      VY0UQAUSWPFxa2SMlG7sqHw8HOAXV26g62nGRkeYXvCRq6EXj8UQQuBZ8OTcXg2Yyu2A5FFE
      Ospf/vXf8OLnLjE5coM7972cP/80mCyE1wOseWdJWBpwEsUbVjnRW8/1u4t86bVXWJoa5s58
      mOj8DTxaD2dP9PDu0BBNtQarZ19m8d4wh048y9rcGFGtkZlrH3D80ucZ//hDnC2dfPmrv45Z
      q65nohRAhWEkQjha+zj11CDXP3iHuYnbmO0WOjq78UxPsu6fxtk+wNC1jzBZbBiRw6yFUqQM
      wYfXbkJSYHc0c+H006gImlu7ONffxI/e/RHrMViLpqhTdW4vjHO66xDHjx1k4c44tQjiKb3q
      BFBdZ/sEoNlcONNL/OlffZ/pWS82h52GOgdXPvwpkRR0uHrw+UL0HT5EZ+9hGpqbiYVXiaUM
      3HWN+JMaHR2d1DkcKKqJxekx3v5whF999RXq6mx0dnSwFAzS0thIV7vKx58M42pvw9XhQlOU
      cp9+yVHkOEAFIgSGAEURCBRUBQxDoKoqQhhA5kYVD34SIrMNMuXUPDdy5lIrCGGgqCoI8VDZ
      6mTXBWAYBoqioFTh00Ty5LHr0hcPnioSyZNA9b77JBKkACRVjhSApKqRApBUNVIAkqpGCkBS
      1UgBSKoaKQBJVbOjYDghBL75GRJKLa31tSwsLtHZexCn1bLb/kkke8rOBGDopDExMTqGr7GW
      js4+asy7F1gai8WYnZ3N/JyKMrM6xUDbIKqi0tDQQHt7+67ZklQ3O7prFVVl3TdL55EjtDvM
      eOYn2IibGDjQnA2D0HV9x05tbGwwOTkJwHxglqujV0g9Z2Cz2Oju7qa5uXnHx5ZIHmZHAjDS
      Sea9q7Ro9aylNIIbKbq7ajCZTOi6jqIojxVh2NraymuvvQZA2kjT/8FRXrr4kgywk+w6uxAN
      KjAMUNXMzbkbAvg0Q0NDXLhwYdeOJ5Fssgsf7gpVHE4uecKRt66kqpECkFQ1UgCSqkYKQFLV
      SAFIqhopAElVIwUgqWoqXgBD0x/wZ1f/D/6N5XK7ItmHVLwA2us6ONB8EJvFVm5XJPuQihfA
      webDvHjwEnaLo9yuSPYhFS8AiWQvkQKQVDVSAJKqRgpAUtVIAUiqGikASVUjBSCpaqQAJFWN
      FICkqpECkFQ1UgCSqkYKQFLVSAFIqhopAElVs7PUiHqaG1c+JmrUcqDDwcTsEmeev0CDzbzb
      /hFPxVjZ8GMIA1WRepXsLjtMjqtx/NRJfvbhdRaWDS6ef4qbdzycPtmNYRgA2f8fl3cnfsL3
      b73O6adP0VnftSvHlEg22WF69DRDHwzx4sWXGLn+C+KRCEqNOZsPdDdXin/h4EWCgxt0NnSh
      qdquHFMi2WTHuUHrG+q5e+ceg0cPcWtikaefOfvITb9bAqirraensReTtnvrD0gkm+zorlI1
      M2efP5/9/UJL5645JJGUEtmqlFQ1UgCSqkYKQFLVSAFIqhopAElVIwUgqWqkACRVjRxdkpQN
      IQSJRAIAQxiM+YY52vYUJtWEqqpYLJY990EKQFI2dF3n29/+NgDhRIjbkzcZPHCcRlsT7e3t
      /PZv//ae+yAFICkbJpOJb37zmwAYhs5b//gWv/HKb2LWdj+qOB+yDSCpCFRVo6Ous6Q3P0gB
      SKocKQBJVVPxbYB7y3f54P7POX72OHW1deV257GZmpoiGo0CMOYbodXhotXhAmBwcDA7p0JS
      GipeABP+cW4v3mA9FtgXAlheXiYQCGAIg7c/+BGHDhzibPezABw9elQKoMRUvABeOfoFLH4b
      XQ3d5XZlVzh37hyQ6QO3OaxcuPACNaaaMntVvVT848aiWbBb7PtuQryiKNSYauXNX2b2110l
      kRSJFICkqqnINkAqlSIQCABwd3mMH177O1xdLupq67BarTidzjJ7+PikjTQ/uvNDQo1rfP7Y
      a+V2p2qpSAHE43Hu3bsHQCQR5XjPcRZmFjCpJjo6OvaFAIQQxJJRYqlouV2paipSABaLhd7e
      3of+ciL7k91uL71De4BZM/OVU7/DhZMXyu1KVSPbAJKqRgpAUtXsLDWiEIRWvKS0ekxGmInp
      eQ4dO0mTQ/ZpF4oQ4sE/A2WfjXE8SeysDSAM/KseNlI6iY1Zeg8fo9G+97N39hNpI833b/4l
      XvscXz39u+V2p2rZcXbovgOHGBuP8tTgUyzMjOHz93G8vw0hBJCZ7bNT0ul03uzShmGQSqV2
      fOxKwRAGh1r6Odh0eF+cz26g63rJ62Jn6wMYacaGx1gKKFjMDfjXEhw8WY/JZELXdRRFeayg
      LsMw8pZXVRWzubSTJvaKs93Pcrbn2XK7UTFomlbya7ulAGZmZujt7WVqaopDhw5l/66qJk4+
      8+KD3wQDRwd3LRu0RFJK8gpgfX2d119/nYGBATo7Ox8RwKMoyHtf8qSS9zuloaGBS5cuUVNT
      Q13dkx+HL5HkYssPdZ/PR3d3N42NjaXy5zMEomsML94kmU6UzYe9YDMW6Md3/r7crlQEi0EP
      37vx59xfmSip3S0FMDAwgM/nIxQKlcqfz6AqKibNvO/aGAoKVrMNq8VablcqApNmwma2VVZW
      CIfDQWNjYzYwrRzUWxs41vYUZm1/jTNoqsalwy9z8dBL5XalInA52vjS8a/Q09hXUrtbCiAQ
      CDA/P09TU1Op/JFISsqWAojFYgAlydEokZSDbd8Abrc7OzmlHBjCIKknsyPM+wUhBEk9SUpP
      ltuVisAQBpFkBN3YeQTBTsgrgMXFRc6fP09HR8enYvNLy1LYx42Fq8RSsbL5sBekjTRv3nyd
      N299r9yuVATjy3f4v7/4Ftfnr5TUbl4BLCws4PP5sNvtTEyUtmvqYZw1dbQ5O7Dsw0bwKffT
      nHafLbcrFUG7s5MTnafpbeorqd28I8FnzpxhaGiI2dlZLl26VEKXHsVR48BR4yib/b1CVVQG
      249ztO2pcrtSETTaGrl46Fdoc3aU1G7eN4DZbKajowNFUfB4PKX0SSIpGXnfAKlUirGxMV56
      6SVqauREF8n+JO8bYG5uDoCPP/6Y0dHRkjlULeiGzuWZD/l45qNyu1IRrET8vDP+Izzr8yW1
      m/cN0NLSwuTkJIODg3g8Hs6elY213eCjjz5ibW0NgUBLmBi7fBf/8BoAX/jCFzCZKjJRx56z
      Gllhwn8XX9iLu4R5YPPWttPp5JVXXiEej9PRUdqGyX7m8OHDJJOZcY1T4hSKomTjnKo5M3R/
      61G+fv4bnO0q7QShvAJQVZXp6WmSySTBYJCenp5S+rXvefjGl2Tqw1yGoMct37dnz55lbm5O
      NoIl+5Yt37mTk5MsLS1lVzSRSPYbWwrAZrPh9XqxWssXsx6IrjHivUUyvb9iZgxhMOy9WfJe
      j0rFG1rk+zdfZ2plsqR28wogEong9XpxuVxl/f5XFAVV0WAffi5riiaTYj1gc+KTpmoltZu3
      DTA2Nsbg4CCtra0MDQ3x2mvlSeHdYG2kwVq+KZl7RSYU4sT2O1YJbc52vnziq/Q2HSip3S3H
      AUZGRpicnKS9vb2UPkkkJSOvAA4cOMCBA6VVo0RSanb0ASqEwO+ZYmklTGjFy9AvrpNI505l
      KJFUMjtMjiuIJTYIrJqJhOc4NdjD6PgiZwbdD+2y8xlcm5mTATYSYXxhL31NBzGppsc+diUg
      hEAgmPCPU1/bQJuz/Zd/f8LPrRgMw+Dy5ctAZoLQB5+8TzwZw2Kqwel0cvLkyT33YYfJcVU6
      3V2sj0fRVI2a2hqMVAzDMLJJbR9nRM8wjOyNkEgn2EiE0Q0dTdEwDOOxEu+Wm2xadAQbiTA1
      Wk32XB8+72pACEF3dybuJ5aKcsL0FK6WNpw1TiwWS0mu82Mkx73LSkjhUG8j718e4+z5F9C0
      TBfW4ybH1XU9W77F0UqLozW7TVXVJzpg7OG6ebr7uUe2aZpWVfFAQojs+dprHI/UR6mu844s
      ZJLj/nJtq95DR3fNIYmklFTP40YiyYEUgKSqeXI/piX7imgywp2lUY60DlBXW78nNt544w1W
      VlYQQjC5co82Z7sUgKQy0FQTjhonZnXvkuO+9tprGIZBWk/zrbf+JxdfuCgFIKkMakw1DLiO
      7amNh6OaXzhykecPX5BtAEl1IwUgqWoqXgCGMIin4vtuhFQIQSKdKHky2EpFCEE8FSvJdRZC
      EE6EiSYjldkGEEKQTGZmgC2HfcwGpjnRcZpas5Xa2toye/d4pNNpkskkhjC4sXCVFrur5DHw
      lchGIszY0jD9rcdotO3tehSRZITXr3+XJcdCZQogkUgwOzMDQDwVR48ZLKYX0VQNt9tNa2vr
      1geoYHxeL8FgECEE+oZgI7rBbGgGgL6+vrL6Vk6sFhtdDb0lyQNba67lfN+LPN97oTIF8DC1
      5lo6zO7td3zCUBQlGwUqAZNqwl3fVTJbJzpPM+A6VvltAIlkL5ECkFQ1FS+AlJ4iEF0rundg
      evU+c4HZPfJKUiksh5e4szRa1P0hhMFS2MdadLXy2wArkWVm16Y52XkWm8VWcLlvDf137BY7
      //bX/sMeeicpBzdu3OCnP/0pALNr06xHA5zqOgMovPrqq9vOJIumovzdyJtEmoOVLwCXox27
      xYnVXFxyrm9e/JdoasWfnmQHnDlzhjNnzgCwFlnl6pWrvHrp1wqehWgz2/nqqd/lnxx/AmKB
      NFWjrrau6HKdJepRkJSX+toG6q0NRU3BVRSFRlsTdbV1ld8GkEj2EikASVVT8QLQDZ1IYmPf
      xQKVEiEEc4GZil5rWYhMlgxD7H1+KSEEq5EVgrH1yheAf2OJEd8t4hV88Sqd1egKf/L2v+En
      4z8qtyt5CSdCjHhvsR4N7LmtSHKDv775F/zN7e9VfiO4ydaCppqoMT/ZQXDlpMHayNfP/3MO
      tw6U25W82C0ODjYfoc66N9MhH8ZqtvFK/xe41H+p8gVgMVlodbjK7cYTjUk1ca7vxXK7sSWa
      quFytpXM1uHWfnoa+yr/E0gi2UseWwCJWJSlpSXiSTmxQ/Lk8dgCGBm+xdp6EH2bXpqUnuQf
      7/4D91cmijp+Ip1gObxUkt4BSflIG2kWgx6SenFLYc2vzzG/PltQL+Ha2hrLy8v4lnyMzY0y
      MjX8+G2AzrY2PIuzLNY0caCrIevIpxObBmIB/vTq/+LlI5+np75vy2Om0+lskt1AdJXZwAwO
      i4NasxVd10mlUo/rdtl4OIHwp0mlUnm37UeEENnzDcdDzAamMKsmmu2tGIZR0HV+5+4/cH38
      Or/58j9F2WYdrZmZGSKRCLqho5tSjN0ZfVwBCCKxOPFEmjpVwWQyoet6zuS4LaZW/v0X/zPN
      thbM5q1zv5hMpmz5VkcbdbX1WM02FEVB07Rty1cyqqrmTYBrNpuzCYargYeT4zZYGznefgp7
      jQNVydRRIdf5d85+jYP6AGbT9msMd3Z2kkqlEELQ7m7DbLI8rgAUDh89xsH+o9tmNVYVlYPN
      h4u2oKkaNot9pw5KnhAURcG5g5gvu8WB3eIoOhbI/mDq5S50gyqo6j5cwlFSFchuUElVUzIB
      JNNJ/uLad7jjGymqXCgeZNI/TkovruH75q3v8f9G/7aoMqXEEAb3Vybwbyztua14Ks6fXf3f
      TPjv7rmtnZJIx7m3fJdoMlJUuU8WrnJj4VpRsWKGMDITaWKBvR8J/s53vsPq6momI+/CBBOu
      GRw1b6NpGn/8x3+8bflYKspqdBV3QzdmbetG0Y9//GOGh4cBmFmaRtM07rZkVh7/2te+VlnL
      vYpMjI6iKLQ69mYE9Fvf+hahUAghBBPz95hqX8BusVNbW8s3vvGNPbFZDEIIvIuLAIQTYUZ9
      w6RdaRqtTTicTtratq+XSf89Jv3jRdtdja5gUk0oYpfDLPP1Agkh+GjoI1648MK2DZZgMMj1
      a9ey5QQCBQVFUXC73Qwc3X5FmsnJSex2Ox0dHTs/mT3g+rVr2bxAIODBeQF87tKlPekFKqbu
      S4mu67z3858Dn73OdfX1PPPMM9seI62nuXrlKufOndv23Hw+X7YXaJOSxQIpioKqqEVfAEVR
      tu3fzVuugi72p8n4Vhr/dlr3pWTH1/mBYIrtBdpENoIlVY0UgKSqKdknUDQZ5Ycjb5FuS3Dx
      0K9suW8qlWJpeRmAcDzIUtiXWShbM1NXV9hgyZu3/gq73c6/aP+jx/Z9LzCEwZ2lUZpszXTU
      dRZc7u7SGN+98m3+6NK/Kji1Yjge4gfDb6J2GhUbFh2Oh7jnv8PB5iPbJsddX1/H7/cD8JPx
      txkbu0NzczMALpeL+vrC5xSUTACqomCz2LCatp/YUl9fz8svvwzA3eUxJn52j/MXL1BXW/fI
      Kh9bYTXbsJoLzyNUahTArJrRlOIavRaThfraekxFpHxRVRWbxUZNAXVfLhRFxaxZUJXtP0rS
      6TTRaBSAg/VHcD3dTiQSQVEU0ul0UXZLJoBas5WX+3+NZ3vPb7uv2WzG5cpMgnG5XJhCFg73
      FBdG8cXB38Bur9wQCkVR6XcVv77ywebD/OtX/l1RZewWB68MfIEzXdv3qpQLR42Dk51nCtq3
      pqaGpqbMW2Lz/4e3FYNsA0iqGikASVUjBSCpava8DXD9+nWi0ShpI83Prv2E2dVpuhp6UFWV
      F154YdvyV+Yu87e336D/5BFaHFuvDDMxMYHP5wPg2r0rWGpqONl7CoDTp0/jdDpzlnv77bcR
      QpAyUtxcuM5g+3HsFgdOp5MXX9zdXpOl5WWWl5YQCGZXZnBYHbTYM+dlGEbOkeBIJML777+f
      +TkZYcw3zGn305g1Mx0dHZw+fTqnratXrxKPx0nqSd69/lPmA3N01rkxmUycP799W2zEe5uf
      T/6EP3j+D7EXEZL+l9e/S5Otmc8fe23L/YQQzM3NAZDUk3gCC3Q0dFJrqqXVVVgiBE9wgXA8
      yIBrsODBMN3Quee/Q6Otee8F0NnZmVkXS09y1nyaNkcH3Y29BZcPxYOsRldJ6olt921ubs6u
      IbZRE0RTTfS19QFbN466ujJ5RFcifmauTXNq4DTdLd17sh7ZF7/4RSBzwb/x3/6QC89d4Pef
      +4Mty5hMJrq7uwGYWp1k5sYUF09fosXeumWXn9vtRtd1Euk4T5vP0FHvxl3fXfCNEoqvs7A+
      R7rIQERv0INubN8bYzKZ+P0/yJz71Ook//G7f8JXf/23ONGZW9C5SKTjRFPRovwTCKLJKHaL
      c+9jgbxeb96uqc2Luh1DQ0NcuHBh2/3W1taIRHJHE7a1tWGxWHbN1m6wU1uFlltcXPzM1FTI
      hAJsir6SKPS8wuEw6+vrObc1NjbicOReZ2wzFuhhZBtAUtVIAUiqGikASVWz543gWCxGIpEg
      pae46blGu7OD7sY+1C0aYj6fjzfeeAPITJSYmBvnyrUraIrGiRMnuHTpUs5yiUSCjY0NAG4t
      foJJNfFUe2a5nJaWlrz2fvaznyGEIBQP8eHoe0wvT9Hu7MDhcPD888/v8My3JqWn+PNr32Ha
      co/fe+b3t9w3Go1y+fJlINNQvzr+C1aCfuwWB21tbRw/fjxvuVQqRSId59biJ3TWddHV0FPw
      nIMfDL/JD4bf4D996b/u+ZKuo75h/scH/wXVLTjXu3XvYDqdzl7nyZV7BKKrPNuT6dXK19MH
      MDs7SygUIqWneH/sXdwu994LYHl5mWgkQtpIs7EWYS0ewBSzoChK3oktLpeLr3/96wCML9/h
      3QkTv/fMP8NZU7flxQuur/9yhtFKGE3V8BqZ391ud944oiNHjgAQS0axt9XSUeemwdq4p+lX
      VEWhq6GH7oaebfc1m8309/cD0B5vo7Gznr6mQ1jN1i1jo5aXlrLdoJHVCGvxNbSoCZPJlD3e
      VrQ52xlsP0GNqbjwgp1QV1NHV0MPjdbtV4mPRCLZ6xwMrhNJRFjUPCiKQn1dHQ0NDTnLbT7M
      4qkYQwvvc+zZo6WLBTKpJo66BgvaV1XVbBfkqZ4znOopLEbkYQ61HCm6jNVi41hb7qfpbqOp
      Ji4dfpkLh4vrBaqrraeutrgMyhbNwtG2p4oqA3Cu7wXO9W0/VrMbdDf28psnfosB17Giyu1k
      Kaxas5UvDv4GFwYuyDaApLqRApBUNY8tAL9nmg8+vEwksfXInxCCSDJSdPLTnRJLRYteVWZz
      OaZiU7D4N5aZWZsqKoGvEJnRyFiRo5gpPUUksYFuFJ6N2xAGkeRG0XUfiK4xszZFqshyc4FZ
      vKHFosoYwiAYWy/qvCCTPDmajBSdFmUturoLaVGE4P6cj+dO9zE6vsjp412fSY47fPs2q2tr
      GIaON7yIw+Kg3tqIpmlc/NznHhxmdwajp2dmuHXrFgBL4UUURcXlyPRe9A8MYLN9doKMoii8
      /fbbQCZ/zkpkmQZrI44aJw0NDXzlK1/JbWt6muvXrwNwde5jFtbn+NLxr2BSTZw5c4aDBw/m
      LPfee++xsrKCIQx++sk7DA1/wMCDttGXv/zlnI38cDic9XEjEWY9FqDF7qLWXEtvb2928hA8
      Wpe3bt8mGAySNtIshRZx1tZRV9tAbW0tFx6Kw3o4NMLv9/Pee+8BMOq9zT3/XX61//M4a+vo
      7+/Puwj15cuX8Xg8APz92A9wWBx87nDGr1dffTVn74xhGLz11ltAJuTlvZvvMj07TbO9hebm
      5ry9fcvLy1y5ehWAtegKsVQMd30mqqCxqYm2POlv3nnnHYLBIMl0kn+4+kOGbn/4mKEQQvDx
      0GVOn+hjdFbnzFNuDMN4pEKXlpYyGZ31FDc91+mo66TrQc9HZ2fng8PsjgBCoVA2FGLYewuT
      qmUbtS0tuZPyKorC4oMehVA8yKhvmIPNh2lztqNpWt7cNJFIhGAwCMCEf5zViJ9ne86jqRoN
      DQ15e2dWV1dJJpMIIbi/OkGLvZUGayMA7e3tOeN00ul0dgrgUtjH1Ookg+3Hqa9twGKxPNLF
      +3BdLi8vP4gFSnDL8wnuhm7c9V2oqvrIeT1sM5lMsrKyAmSe5IvBBU65z2A123A4HHmnpK6u
      rpJIZOK1rs3/glqTleMdGbG0trZiMuV+1nq9XiDz9h3zjXC0bRCzZsZisWSnOX6aWCyWDYWY
      Wp1kLbrK013PZXqB6uvzToRaXl4mnU6jGzo3Pddpc3Y8fiyQ3zPNnSkvTz/3HPaa/NmhJZJK
      pGSJsSSSSkTepZKqRgpAUtVIAUiqGikASVUjBSCpaqQAJFWNFICkqpECkFQ1ezIfQNf1nAs+
      CyHypuTYi2352M9+lNJWvm2lrt/HqY89EYCmaTlHgrdyNJ1O540X2aqidV3PWW5zgDtfbE2x
      tnZabvNBUIr62Iq9qPt8ibxKWfdb2doqKmHT1q5/AuVbrsbn8yGEeCS19cPkcjKVSjE7O8vs
      7CzT09M57eUqp+s6Ho8Hn8+X8020VZiGruvZILJCygWDQaamppiZmckGkT1MvvpIJpPMz8/j
      9/tzBgPmu2her5dQKJTX/1x4vV5mZ2dZWFgouD42g+K2ipTJdV6RSASPx5PTTj5bAHNzc0xO
      TjI/P1+wj+FwOGszn61cPkajURRFIZFI7L4A8hn1+XyMj4+zurpKIBDIWe7TaJqGw+EgHA7n
      jeTMVW52dhaHw4GmadlUidvZAvjkk0+4ceNGpmJy7JPrb2azmWg0Sjwez3ne+QQwNTVFU1MT
      sVgsG1W6na1NO5vRq4XS3NxMe3s7ZrM5p0jz1T3A+Pg4o6Ojn9mer+49Hg8mk4nV1dWcvuSr
      e5fLRTKZxOVy5ayvXOW8Xi/BYJDJyUlisc/O/chX98FgkNHRUe7fv1+6RnB3dzf9/f2Ew+GC
      c7hHo1Fu3ryJqqp5nyi5SCaTeL1eVlZWsiG6heB2uzGbzUQihU+wMJvNNDQ0oKpqUbYSiQTz
      8/OEw+Gcb8RcaJqW3X9qaqpgW36/n8XFRQKBQMFrJqTTaVZWVtA0DbfbXbCtTZEtLi4W9aaa
      m5sjFAoxNzdXcN13dHQQCoWor68nHo8XbCudTrO+vo6qqqWbFN/Y2IgQgvb29uyrazscDgcX
      L15kZWWFZLLwWUlHH2SbMAwjG0dfCEIIWltbM0t2FngRgsEgfr8fm81WVARsa2trdj5EoZhM
      JiwWC729vTkn9+SjqamJhYUFFEUp+OEjhMBqtaIoSlF1X1NTQ319PVarlfX19YKXtLLZbNns
      HIWy6Zvf7ycWi9HY2FhQOcMwshkiSiYAj8dDLBZD1/WC81KGQiGGh4cxm82cOnWqYFt+vz/7
      /VpTU1PQgsuQuXgbGxvY7faCb2abzYbZbMYwjKIm9iwsLGSfkL29vQUt/aSqKjabjYmJCVwu
      Fz0926dUAbhx4wZWqxWHw1Hwm9RisWRX6cn3jZ2L9fV1dF0vSqCQyewdiUTQNI2DBw8W1MgX
      QhAIBOjo6ChqPWifz0cymdy7XqBc1NfXs7GxQSwWK/gp5HQ6OX78OD6fD6/XS19fX0HlFEXh
      6NGj6Lpe1GvY4/HQ0tKCz+ejrq4ub2/Fp8sMDAxgMpkYHx8v+EJ0d3dnpwkWkrQXMg10VVUZ
      GBgo6m3T399PKpUqap6GYRjEYjGEEPh8vi0Tiz2M2+3OJq0q9IkMcPjwYVKpFM3NzQX3cAkh
      cDqdaJpW1H114MABmpqa8Pv9pWsDzMzMkE6ncTgcBSec2lxRfWBgoChba2trRKNRNjY2ihJA
      MBgkFAoRjUYL/p7v7e3l/v37jI+PZ5+YhWCxWBgZGWF9fb3ghd02OxhGRkayN8Bz/h4AAAEi
      SURBVFkhWK1W7HY7NputqJsrnU4X9cbeJBqNMj4+XvCbQwjB2toabrcbj8fzmQzO+QgGg1it
      VlKpVN5kWLlsBQIBJicnS/sGOHnyZLaLMZVKFfTUs1gsTE1NZW/KQjlw4AAejwdVVQtOwQ5w
      7ty5X/YPF/ik3Pw+DgaDBV+ETYqdjCeEIJFIZNZbKOK7fCeLBT68UGExLC8v4/f76e/vz5um
      PBeGYWRv/kLrPp1OE4/HWV1dxW63F/SpqygKNpsNwzAybZzdnhK522yepN1uL3rwpxRsDsZN
      Tk5y5MiRgvNubraHIPOELqScEIJUKpUVaaGfTqUkHo9nxWm1Wgt+22+em9lsLul1rngBVDqR
      SITFxcXs92uhDW5JZSAFIKlq/j86P+di1NR28gAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Cancer across Zipcodes' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Crosstab' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Histogram' width='192'>
      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
      JMPLaJqWVy9gqaijzrVAxhagrbaC/tEFui6eI6HYycXWkRUNqzm/XqC9tYmZpQiXr77N1FA/
      9YfasZlkfFVOotEEFf7qXWbUGBsZI5XJ4m7vYHx0hPbOs6QjS6wnrZw5VYfT52NpcRHw7Srz
      xtoiiVyCYHCBapeL6YkRjp84Tt+Dh3SefwslmUSVk2RkFadV74yTxtzUOKlsHKm6jU+uH2V9
      LYKWSzCxsM75M8cxu1yEV5ZQNNiumcUgWFDWiA0xgrJGCEBQ1ggBCA48T205r74uBCB4iUw8
      wh/vdqNkU/zT72/z/OZTTVMZ7B9mfGLwlTeVmksyOjlLaGWO1YgOT46S5H7v0AuXJp4MkpY1
      1GyMoaFZNCXDyPhUXn8XTcnyD599zu27jwCIhRdYCkWefVZ0WyIFb55kZJ0vf/M5tR4rv/rV
      72nwWvnjN0+48fENvvziC2yOGjraa5HjUX7/TR/vXDzP/Qc9tJ95lw/ON3Przh2O1dmwBzr4
      4hd38LaepMpi4pDPznxcZnhsnHcvXeDurbtcvP4uv/7Z/2Zk9AIX2nw8nozQXGUDu8Q/fvE5
      /pYrnDjipndggLFHd5hdS3H9g8vcvXWfs2dP09Pbywcf3+TWbz4jazGhmSu5+V4nX3f3cfP7
      f4UzOo3T30rPb/+ewZE+brzTRSSe5Vc/u4uv7YSxK8GC0iS9ESKeTfDgwRiHWhtYmRnBWuli
      eXiAY+//OZZYnHBsCUVRWZubIqaZeev9jxgbGuXc8Rb+cPcRUi5NDhVf2znWx58QjiWpIs26
      VEE0tMj67DxplxsTChWeJiymJCvhBC5JJZXVWF5Y5PrNT9hYzdJxxMfgeJBEQuWtNh9/7J/g
      e//ybxj55hY//Nc/5M7XtzB5m6iuUGiosPFkcBi704nNVotVi1Lhr2cjkuJMYwXzoQSxdAJv
      Uweb4RUxDSp4mURomfn1DcZn5gm4qvDWOOgZmODcqeM86unG33wcb5WZXDzM1PwSxzpP09x+
      lIWpWS6eO8KDwTlafBYSqp3Hd+5QcegY9tgic2ubnDx5gpmpCTqPn6N/aIAz58+RSGYxqUkq
      NBhY2uTcoQAVLhN3ux/R1vkOV8620DMwjpZN0+C2EcNG36M+Tpw6zsDAE975k/cJr8UwqSns
      kokKl4newUm6Ll+n1rrB7wZXsMfmicgO3r98mtBmEou9ksRGSAhAcNDRePygh1NdF1+yWii5
      jBCAoLz5/7+NUgM9i8EgAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='ID Sets: High Risk Income Brackets1' width='192'>
      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
      2Nr/A4qXRgqabMM1AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Income and Race using ID Sets' width='192'>
      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
      j09Of23KJlAqOUU4NMBAaJCpRIpEbJzoRAy42Yp0dCSCXA0hMsGUAEyMDtB08RKXzr/PyXNX
      uPbBUf7jJydIaTA22MF//ft/EzG/LbCwAFM2gbyFZdy70cGVC2dJuByg5bDYNUF3JEbs6jVW
      rV1FCo3Pn6HIhk7xYmGYcaf4uacx2NfHyEQMZwFoKJSvXE3npYtMjDmo8NqAzzp6Z0uneJE5
      WdUpfq5NjIbxLqmisTifX1/ooaxAo8BXQuf545RW34c63AMoOBwOIHs6xYvMyapO8XMtnUry
      0e+aSKgOGjc14E2PkMhZRIVtG66y5aSH8vDYzKhMWI0pAfAULeHBh5d87l8+OS7rrfnkP1Rm
      vCZhTXImWFiaBEBYmgRAWJoEQFiaBEBYmgRAWJoEQFiaBEBYmgRAWJoEQFiaBEBYmgRAWJoE
      QFiaBEBYmgRAWJoEQFiaBEBYmgRAWJoEQFiaBEBYmgRAWJoEQFiaBEBYmgRAWJoEQFiaBEBY
      mgRAWJoEQFiaBEBYmgRAWJoEQFiaBEBYmu4AaJo23bfp838XYj77f6TFRbMZ6RNmAAAAAElF
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Scatterplot' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Scatterplot Map' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='ScatterplotDashboard' width='192'>
      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
      d2r62PwSrQAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
